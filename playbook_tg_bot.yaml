- name: Update all
  hosts: all
  become: yes
  gather_facts: false
  tasks:
    - name: Update Ubuntu 
      ansible.builtin.apt:
        name: "*"
        state: latest
    - name: Install PostgreSQL
      package:
        name: postgresql,postgresql-contrib,libpq-dev
        state: present
    - name: "Install Python packages"
      package:
        name: python3, python3-pip
        state: present
    - name: "Install Python packages"
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary
    - name: "Install Python packages"
      package:
        name: acl
        state: present





- name: db configuration
  hosts: host01
  become: yes
  gather_facts: false
  tasks:
    - name: post installation configuration postgresql.conf
      blockinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        block: |
          listen_addresses = '*'
          wal_level=replica
          hot_standby=on
          max_wal_senders=10
          max_replication_slots=10
          hot_standby_feedback=on
          log_replication_commands=on
    - name: post installation configuration pg_hba.conf
      blockinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        block: | 
          host replication all {{ hostvars[inventory_hostname]['ansible_host'] }}/24 scram-sha-256
          host replication {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} {{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}/24 scram-sha-256
          host all all {{ hostvars[inventory_hostname]['ansible_host'] }}/32 trust
    - name: restart
      service:
        name: postgresql
        state: restarted

- name: db init setup
  hosts: host01
  become: true
  become_user: postgres
  gather_facts: false
  tasks:
  
    - name: Create database user
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        password: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
        role_attr_flags: SUPERUSER

    - name: Create a new database
      community.general.postgresql_db: 
        name="{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        encoding='UTF-8'
        lc_collate='en_US.UTF-8'
        lc_ctype='en_US.UTF-8'
        template='template0'
        state=present

    - name: Create Emails
      community.postgresql.postgresql_table:
        db: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        name: emails
        columns:
          - ID SERIAL PRIMARY KEY
          - Email VARCHAR NOT NULL

    - name: Fill Emails
      community.postgresql.postgresql_query:
        db: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        query: INSERT INTO emails (Email) VALUES ('bot@mail.ru'), ('bob@gmail.com')

    - name: Create Phones
      community.postgresql.postgresql_table:
        db: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        name: phones
        columns:
          - ID SERIAL PRIMARY KEY
          - Phone VARCHAR NOT NULL

    - name: Fill Phones
      community.postgresql.postgresql_query:
        db: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        query: INSERT INTO phones (Phone) VALUES ('+7(800)5553535'), ('89845551553')



- name: slave
  hosts: host02
  become: yes
  tasks:
    - name: Clear
      command: rm -rf /var/lib/postgresql/14/main/
    - name: pg_basebackup
      command: pg_basebackup -R -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -D /var/lib/postgresql/14/main/ -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -P 
      environment: 
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
        DB_HOST: "{{ hostvars[inventory_hostname]['DB_HOST'] }}"
    - name: chown
      command: chown -R postgres:postgres /var/lib/postgresql/
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

        
- name: bot
  hosts: host01
  tasks:
    - name: mk bot repo
      command: mkdir -p "/home/{{ hostvars[inventory_hostname]['ansible_user'] }}/bot"
    - name: git clone
      git:
        repo: "{{ hostvars[inventory_hostname]['REPO'] }}"
        dest: "/home/{{ hostvars[inventory_hostname]['ansible_user'] }}/bot"
        version: main
    - name: install dependency
      pip:
        requirements: "/home/{{ hostvars[inventory_hostname]['ansible_user'] }}/bot/requirements.txt"
    - name: Bot run
      command: python3 "/home/{{ hostvars[inventory_hostname]['ansible_user'] }}/bot/bot.py"
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        CHAT_ID: "{{ hostvars[inventory_hostname]['CHAT_ID'] }}"
        RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"